#!/bin/bash

# extra preparation when compiling on the OSG submit host
if [[ $(hostname) == 'xd-login.opensciencegrid.org' ]]; then
  # load lmod
  source /cvmfs/oasis.opensciencegrid.org/osg/modules/lmod/current/init/bash

  # load necessary modules:
  #  - recent version of gcc, for c++11 among other things
  #  - recent version of cmake
  #  - boost for c++ codes
  #  - hdf5 for trento
  #  - python and packages for generating the vishnew EOS table
  module purge
  module load gsl/1.16 gcc cmake boost hdf5 python/3.5.2 root/5.34-32 all-pkgs

  # the modules set the standard environment variables CPATH and LIBRARY_PATH
  # set corresponding variables for cmake
  export CMAKE_INCLUDE_PATH=$CPATH
  export CMAKE_LIBRARY_PATH=$LIBRARY_PATH

  # set c++ and fortran compiler flags
  export CXXFLAGS="-march=x86-64 -mtune=intel"
  #export FFLAGS="$CXXFLAGS"
  export FFLALGS="-march=x86-64"

  # explicitly set fortran compiler to override cmake default
  #export FC='gfortran'
  export FC='/usr/bin/gfortran'

  # set linker flags to prefer the module versions of libraries to the system versions
  # the linker reads $LIBRARY_PATH but gives it lower priority than the standard paths
  # this uses -L flags to give $LIBRARY_PATH higher priority
  export LDFLAGS="-L${LIBRARY_PATH//:/ -L}"
fi


pkgname='hic_3D'
#destdir='${1-.}'

# create a temporary directory for installing files
installdir=$(mktemp --directory)
pkgdir="$installdir/$pkgname"

# and make sure it is cleaned on exit
trap "rm -r $installdir" EXIT

# build each model
for i in models/*/; do
  pushd $i

  # if build with Cmake
  if [[ -f CMakeLists.txt ]]; then
    # create build directory and run cmake if necessary
    if [[ -d build ]]; then
      cd build
    else
      mkdir build && cd build
      # disable install prefix by setting it to "/"
      # the actual install location will be set by DESTDIR later
      cmake -DCMAKE_BUILD_TYPE=Release  -DCMAKE_INSTALL_PREFIX="/"  .. || exit 1
    fi
    make --jobs=$(nproc) DESTDIR=$pkgdir install || exit 1
  elif [[ -f setup.py ]]; then
    python3 setup.py install --no-compile --root=$pkgdir --prefix= || exit 1
    #export PYTHONPATH=$PYTHONPATH:"$(echo $pkgdir/lib/python*/site-packages)"
  else
    echo "unknown build system for model $i"
    exit 1
  fi

  popd
done

# install the event runner script
mkdir $pkgdir/Results/
cp models/run-events $pkgdir/

# create tgz for distributing to each job
tar --verbose --create --gzip --file $pkgname.tar.gz \
  --directory $installdir $pkgname
